generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  DERMATOLOGIST
  GENERALIST
  PATIENT
}

enum Sex {
  MALE
  FEMALE
}

enum Status {
  PENDING
  ANALYZED
  APPOINTMENT
}

enum Criticality {
  LOW
  MEDIUM
  HIGH
}

model User {
  id          String   @id @unique @default(uuid())
  role        Role     @default(PATIENT)
  sex         Sex
  password    String
  firstName   String
  lastName    String
  email       String   @unique
  dateOfBirth DateTime
  address     String
  city        String
  zipCode     String
  secuNumber  String?
  rppsNumber  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  approved    Boolean  @default(true)

  // Relationships
  consultationsPatient       Consultation[] @relation("ConsPatient")
  consultationsGeneralist    Consultation[] @relation("ConsGeneralist")
  consultationsDermatologist Consultation[] @relation("ConsDermatologist")

  appointmentsPatient       Appointment[] @relation("AppPatient")
  appointmentsDermatologist Appointment[] @relation("AppDermatologist")

  conversationsGeneralist    Conversation[] @relation("ConvGeneralist")
  conversationsDermatologist Conversation[] @relation("ConvDermatologist")
  messages                   Message[]
}

model Consultation {
  id          String       @id @unique @default(uuid())
  status      Status       @default(PENDING)
  object      String
  description String
  evolution   Boolean      @default(false)
  advice      String? // rempli par le generaliste
  criticality Criticality? // rempli par le generaliste ou le dermatologiste
  files       String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relationships
  patientId String
  patient   User   @relation("ConsPatient", fields: [patientId], references: [id])

  dermatologistId String?
  dermatologist   User?   @relation("ConsDermatologist", fields: [dermatologistId], references: [id])

  generalistId String?
  generalist   User?      @relation("ConsGeneralist", fields: [generalistId], references: [id])
  analysis     Analysis[]

  appointmentId String?      @unique
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
}

model Analysis {
  id          String      @id @unique @default(uuid())
  result      String
  criticality Criticality
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  consultationId String
  consultation   Consultation @relation(fields: [consultationId], references: [id])
}

model Appointment {
  id        String    @id @unique @default(uuid())
  date      DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relationships
  patientId String
  patient   User   @relation("AppPatient", fields: [patientId], references: [id])

  dermatologistId String
  dermatologist   User   @relation("AppDermatologist", fields: [dermatologistId], references: [id])

  consultationId String?       @unique
  consultation   Consultation?
}

model Conversation {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  generalistId    String
  generalist      User      @relation("ConvGeneralist", fields: [generalistId], references: [id])
  dermatologistId String
  dermatologist   User      @relation("ConvDermatologist", fields: [dermatologistId], references: [id])
  messages        Message[]
}

model Message {
  id        String   @id @unique @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
}
