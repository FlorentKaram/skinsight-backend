generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Restaurant {
  id           String        @id @unique @default(uuid())
  name         String
  address      String
  description  String
  price        String
  n_siret      String
  phone        String
  code_postal  String
  city         String
  email        String
  users        User[]        
  features     Feature[]
  favorites    Favorite[]
  reservations Reservation[]
  createdAt    DateTime
  updatedAt    DateTime
}

model Favorite {
  id           String     @id @unique @default(uuid())
  userId       String
  restaurantId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

model Reservation {
  id           String     @id @unique @default(uuid())
  date         DateTime
  nb_people    Int
  status       Status
  userId       String
  restaurantId String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime
  updatedAt    DateTime
}

model Feature {
  id         String       @id @unique @default(uuid())
  name       String
  icon       String?
  category   Category[]
  restaurant Restaurant[]
}

model Category {
  id      String    @id @unique @default(uuid())
  name    String
  feature Feature[]
}

model User {
  id          String        @id @unique @default(uuid())
  name        String
  email       String        @unique
  phone       String?
  password    String
  description String?
  roleId      String
  role        Role          @relation(fields: [roleId], references: [id])
  avatar      String?
  banner      String?
  favorite    Favorite[]
  reservation Reservation[]
  restaurantId String?
  restaurant  Restaurant?  @relation(fields: [restaurantId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Role {
  id   String @id @unique @default(uuid())
  name String
  user User[]
}

enum Status {
  PENDING
  ACCEPTED
  REFUSED
}

enum Price {
  ECO
  MODERATE
  EXPENSIVE
  VERY_EXPENSIVE
}
